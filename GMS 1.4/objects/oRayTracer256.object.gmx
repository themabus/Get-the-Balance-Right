<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//320x240   41036, 40805, 40840, 41078, 40965

width = room_width;
height = room_height;
fov = 1.05;

show_debug_message('Go!');
time_start = current_time;

out_size = width*height;
time_step = 1000.0 / room_speed;

// 32k array workaround ---&gt;
array_max = 32000;
out_cnt = ceil(out_size/array_max);
framebuffer = array_create(0);
out = array_create(0);
for (var i=0; i&lt;out_cnt; i++) {
    if (out_size&gt;=array_max) {
        var size = array_max;
        out_size-=array_max;
    }
    else var size = out_size;
    for (var j=size-1; j&gt;=0; j--) {
        framebuffer[i,j] = noone;
        out[i,j] = noone;
    }
}
out_size = width*height;
// &lt;--- 32k array workaround

enum v {
    x,
    y,
    z
}

// materials ---&gt;
mat = instance_create(x,y, oMaterial);
mat_white = instance_create(x,y, oMaterial);
mat_white.diffuse_color = array(.3, .3, .3);
mat_orange = instance_create(x,y, oMaterial);
mat_orange.diffuse_color = array(.3, .2, .1);

ivory = instance_create(x,y, oMaterial);
ivory.refractive_index = 1.0;
ivory.albedo = array(0.9, 0.5, 0.1, 0.0); 
ivory.diffuse_color = array(0.4, 0.4, 0.3);
ivory.specular_exponent = 50.0;

glass = instance_create(x,y, oMaterial);
glass.refractive_index = 1.5;
glass.albedo = array(0.0, 0.9, 0.1, 0.8); 
glass.diffuse_color = array(0.6, 0.7, 0.8);
glass.specular_exponent = 125.0;

red_rubber = instance_create(x,y, oMaterial);
red_rubber.refractive_index = 1.0;
red_rubber.albedo = array(1.4, 0.3, 0.0, 0.0); 
red_rubber.diffuse_color = array(0.3, 0.1, 0.1);
red_rubber.specular_exponent = 10.0;

mirror = instance_create(x,y, oMaterial);
mirror.refractive_index = 1.0;
mirror.albedo = array(0.0, 16.0, 0.8, 0.0); 
mirror.diffuse_color = array(1.0, 1.0, 1.0);
mirror.specular_exponent = 1425.0;
// &lt;--- materials

// spheres ---&gt;
spheres = array_create(4);

spheres[0] = instance_create(x,y, oSphere);
spheres[0].center = array(-3, 0, -16);
spheres[0].radius = 2;
spheres[0].material = ivory;

spheres[1] = instance_create(x,y, oSphere);
spheres[1].center = array(-1.0, -1.5, -12);
spheres[1].radius = 2;
spheres[1].material = glass;

spheres[2] = instance_create(x,y, oSphere);
spheres[2].center = array(1.5, -0.5, -18);
spheres[2].radius = 3;
spheres[2].material = red_rubber;

spheres[3] = instance_create(x,y, oSphere);
spheres[3].center = array(7, 5, -18);
spheres[3].radius = 4;
spheres[3].material = mirror;
// &lt;--- spheres

// lights ---&gt;
lights = array_create(3);
lights[0] = array(-20, 20, 20);
lights[1] = array(30, 50, -25);
lights[2] = array(30, 20, 30);
// &lt;--- lights

stage = 0;
pix = 0;

cnt = 0;
surf = noone;
draw_set_font(font0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var t = current_time;//get_timer();

switch (stage) {
    case 0:
        var dir_z = -height/(2.*tan(fov/2.));//const
        while(pix&lt;out_size) {// actual rendering loop
            var dir_x = (pix%width + 0.5) -  width/2.;
            var dir_y = -(pix div width + 0.5) + height/2.;// this flips the image at the same time
            var vec = array(dir_x,dir_y,dir_z);
            var normalized = vec3_normalized(vec);
            var tmp = cast_ray(array(0,0,0), normalized);
            if (pix&gt;=(cnt+1)*array_max) cnt++;
            framebuffer[cnt,pix-(cnt*array_max)] = tmp;
            pix++;
            if ( current_time - t &gt; time_step ) return 0;
        }
        cnt = 0;
        pix = 0;
        stage++;
    break;

    case 1://unneccesary loops left in deliberately
        while(pix&lt;out_size) {
            if (pix&gt;=(cnt+1)*array_max) cnt++;
            var color = framebuffer[cnt,pix-(cnt*array_max)];
            var mx = max(1., max(color[0], max(color[1], color[2])));
            out[cnt,pix-(cnt*array_max)] = make_colour_rgb(255*color[0]/mx, 255*color[1]/mx, 255*color[2]/mx);
            pix++;
            if ( current_time - t &gt; time_step ) return 0;
        }
        stage++;
        time_end = current_time - time_start;
        show_debug_message(time_end);
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (stage) {
    case 0:
        draw_text(0,10, string(pix)+'/'+string(out_size));
    break;
    
    case 1:
        draw_text(0,10, string(out_size)+'/'+string(out_size));
    break;
    
    case 2:
        if (!surface_exists(surf)) {
            surf = surface_create(width,height);
            surface_set_target(surf);
            draw_clear_alpha(c_black, 0);
            var cnt = 0;
            var k = 0;
            for (var i=0; i&lt;height; i++) {
                for (var j=0; j&lt;width; j++) {
                    if (k&gt;=(cnt+1)*array_max) cnt++;
                    draw_point_colour(j,i, out[cnt,k-(cnt*array_max)]);
                    k++;
                }
            }
            surface_reset_target();
        }

        draw_surface(surf, 0, 0);
        draw_text(0,0, 'your score is and always has been');
        draw_text(0,10, time_end);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
