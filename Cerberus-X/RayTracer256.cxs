'320x240	 1802,  1812,  1776,  1816,  1778	<- GCC
'320x240	  864,   772,   773,   923,   904	<- HTML5

Strict

#MOJO_IMAGE_FILTERING_ENABLED=False
#GLFW_WINDOW_TITLE="RayTracer256"

Import mojo
Import vector

Class Material
	Field refractive_index:Float = 1
	Field albedo:Float[] = [2.0, 0.0, 0.0, 0.0]
	Field diffuse_color:vec3
	Field specular_exponent:Int = 0
End

Class Sphere
	Field center:vec3
	Field radius:Float
	Field material:Material
End

Class ret_scene
	Field hit:Int
	Field point:vec3
	Field N:vec3
	Field material:Material
End

Class ret_sphere
	Field hit:Int
	Field dist:Float
End


Class RayTracer256 Extends App
	Const width:Int = 320
	Const height:Int = 240
	Const fov:Float = 1.05' 60 degrees field of view in radians

	Field time_start:Int = Millisecs()
	Global fps:Int = 60

	Global out_size:Int = width * height
	Field time_step:Float = 1000.0 / fps

	Field framebuffer:vec3[out_size]
	Field out:Int[out_size]

	Global lights:vec3[3]
	Global spheres:Sphere[4]
	
	' materials --->
	Global mat:Material = New Material
	Global mat_white:Material = New Material
	Global mat_orange:Material = New Material
	Field ivory:Material = New Material
	Field glass:Material = New Material
	Field red_rubber:Material = New Material
	Field mirror:Material = New Material
	' <--- materials
	
	Field stage:Int = 0
	Field pix:Int = 0
	Field D2R:Float = 180/PI

	Global zero:vec3 = New vec3()
	Global fs:Bool = False
	Global img:Image
	Global time_end:Int = 0
	Global label1$ = "your score is and always has been"
	Global sx# = 1
	Global sy# = 1


	Method OnCreate:Int()
		' materials --->
		mat.diffuse_color = New vec3()
		mat_white.diffuse_color = New vec3(0.3, 0.3, 0.3)
		mat_orange.diffuse_color = New vec3(0.3, 0.2, 0.1)
		
		ivory.refractive_index = 1.0
		ivory.albedo[0] = 0.9
		ivory.albedo[1] = 0.5
		ivory.albedo[2] = 0.1
		ivory.albedo[3] = 0.0
		ivory.diffuse_color = New vec3(0.4, 0.4, 0.3)
		ivory.specular_exponent = 50.0
		
		glass.refractive_index = 1.5
		glass.albedo[0] = 0.0
		glass.albedo[1] = 0.9
		glass.albedo[2] = 0.1
		glass.albedo[3] = 0.8
		glass.diffuse_color = New vec3(0.6, 0.7, 0.8)
		glass.specular_exponent = 125.0
		
		red_rubber.refractive_index = 1.0
		red_rubber.albedo[0] = 1.4
		red_rubber.albedo[1] = 0.3
		red_rubber.albedo[2] = 0.0
		red_rubber.albedo[3] = 0.0
		red_rubber.diffuse_color = New vec3(0.3, 0.1, 0.1)
		red_rubber.specular_exponent = 10.0
		
		mirror.refractive_index = 1.0
		mirror.albedo[0] = 0.0
		mirror.albedo[1] = 16.0
		mirror.albedo[2] = 0.8
		mirror.albedo[3] = 0.0
		mirror.diffuse_color = New vec3(1.0, 1.0, 1.0)
		mirror.specular_exponent = 1425.0
		' <--- materials
		
		' spheres --->
		spheres[0] = New Sphere
		spheres[0].center = New vec3(-3, 0, -16)
		spheres[0].radius = 2.0
		spheres[0].material = ivory
		
		spheres[1] = New Sphere
		spheres[1].center = New vec3(-1.0, -1.5, -12)
		spheres[1].radius = 2.0
		spheres[1].material = glass
		
		spheres[2] = New Sphere
		spheres[2].center = New vec3(1.5, -0.5, -18)
		spheres[2].radius = 3.0
		spheres[2].material = red_rubber
		
		spheres[3] = New Sphere
		spheres[3].center = New vec3(7, 5, -18)
		spheres[3].radius = 4.0
		spheres[3].material = mirror
		' <--- spheres
		
		' lights --->
		lights[0] = New vec3(-20,20,20)
		lights[1] = New vec3(30,50,-25)
		lights[2] = New vec3(30,20,30)
		' <--- lights
		
		SetDeviceWindow(width,height,4)
		SetUpdateRate(fps)
		img = CreateImage(width, height)
		
		Return 0
	End
	
	
	Method OnUpdate:Int()
		If input() EndApp()
		
		Local t:Int = Millisecs()
		
		Select stage
			Case 0
				Local dir_z:Float = -height/(2.0*Tan(D2R*fov/2.0))' Const
				While pix < out_size' actual rendering loop
					Local dir_x:Float = (pix Mod width + 0.5) - width/2.0
					Local dir_y:Float = -(pix/width + 0.5) + height/2.0' this flips the image at the same time
					framebuffer[pix] = cast_ray(zero, New vec3(dir_x, dir_y, dir_z).normalized())
					pix+=1
					If Millisecs() - t > time_step Then
						Return 0
					Endif
				Wend
				pix = 0
				stage+=1
			Case 1' unneccesary loops left in deliberately
				While pix < out_size
					Local mx:Float = Max(1.0, Max(framebuffer[pix].x, Max(framebuffer[pix].y, framebuffer[pix].z)))
					out[pix] = 255 Shl 24 + Int(255*framebuffer[pix].x/mx) Shl 16 + Int(255*framebuffer[pix].y/mx) Shl 8 + Int(255*framebuffer[pix].z/mx)
					pix = pix + 1
					If Millisecs() - t > time_step Then
						Return 0
					Endif
				Wend
				pix = 0
				stage+=1
				time_end = Millisecs() - time_start
				Print time_end
			Case 2
				img.WritePixels(out, 0,0, width,height)
				stage = stage + 1
		End Select
		
		Return 0
	End
	
	
	Method OnRender:Int()
		Select stage
			Case 0
				DrawText pix +"/"+ out_size, 0,10
			Case 1
				DrawText out_size +"/"+ out_size, 0,10
			Case 3
				DrawImage(img,0,0, 0, sx,sy)
				SetBlend(AdditiveBlend)
				DrawText label1, 0,0
				DrawText time_end, 0,10
				SetBlend(AlphaBlend)
		End Select
		
		Return 0
	End
	
	
	Function cast_ray:vec3(orig:vec3, dir:vec3, depth:Int = 0)
		Local scene:ret_scene = scene_intersect(orig, dir)
		
		If (depth>4) Or (scene.hit=0) Then
			Return New vec3(.2, .7, .8)' background color
		Endif
		
		Local reflect_dir:vec3 = reflect(dir, scene.N).normalized()
		Local refract_dir:vec3 = refract(dir, scene.N, scene.material.refractive_index, 1.0).normalized()
		Local reflect_color:vec3 = cast_ray(scene.point, reflect_dir, depth + 1)
		Local refract_color:vec3 = cast_ray(scene.point, refract_dir, depth + 1)
		
		Local diffuse_light_intensity:Float = 0
		Local specular_light_intensity:Float = 0
		
		For Local i:Int=0 To lights.Length()-1' checking If the point lies in the shadow of the light
			Local light_dir:vec3 = lights[i].sub(scene.point).normalized()
			Local shadow:ret_scene = scene_intersect(scene.point, light_dir)
			If shadow.hit<>0 And shadow.point.sub(scene.point).norm() < lights[i].sub(scene.point).norm() Continue
			diffuse_light_intensity = diffuse_light_intensity + Max(0.0, light_dir.dot(scene.N))
			specular_light_intensity += Pow(Max(0.0, reflect(light_dir.inv(), scene.N).inv().dot(dir)), scene.material.specular_exponent)
		Next
		
		Local f1:Float = diffuse_light_intensity * scene.material.albedo[0]
		Local f2:Float = specular_light_intensity * scene.material.albedo[1]
		Local v1:vec3 = scene.material.diffuse_color.scale(f1)
		Local v2:vec3 = New vec3(f2, f2, f2)
		Local v3:vec3 = reflect_color.scale(scene.material.albedo[2])
		Local v4:vec3 = refract_color.scale(scene.material.albedo[3])
		Return v1.add(v2).add(v3).add(v4)
	End
	
	
	Function scene_intersect:ret_scene(orig:vec3, dir:vec3)
		Local ret:ret_scene = New ret_scene
		ret.material = mat
		ret.point = New vec3()
		ret.N = New vec3()
		
		Local nearest_dist:Float = 1e10
		If Abs(dir.y)>.001 Then' intersect the ray with the checkerboard, avoid division by zero
			Local d:Float = -(orig.y+4)/dir.y' the checkerboard plane has equation y = -4
			Local p:vec3 = orig.add(dir.scale(d))
			If d>.001 And d<nearest_dist And Abs(p.x)<10 And p.z<-10 And p.z>-30 Then
				nearest_dist = d
				ret.point = p
				ret.N.y = 1
				If (Int(0.5*ret.point.x+1000) + Int(0.5*ret.point.z)) & 1 ret.material = mat_white Else ret.material = mat_orange
			Endif
		Endif
		
		For Local i:Int=0 To spheres.Length()-1' intersect the ray with all spheres
			Local sphere:ret_sphere = ray_sphere_intersect(orig, dir, spheres[i])
			If sphere.hit=False Or sphere.dist > nearest_dist Continue
			nearest_dist = sphere.dist
			ret.point = orig.add(dir.scale(nearest_dist))
			ret.N = ret.point.sub(spheres[i].center).normalized()
			ret.material = spheres[i].material
		Next
		
		ret.hit = nearest_dist<1000
		
		Return ret
	End


	Function ray_sphere_intersect:ret_sphere(orig:vec3, dir:vec3, s:Sphere)' ret value is a pair [intersection found, distance]
		Local ret:ret_sphere = New ret_sphere
		ret.hit = False
		ret.dist = 0
		
		Local L:vec3 = s.center.sub(orig)
		Local tca:Float = L.dot(dir)
		Local d2:Float = L.dot(L) - tca*tca
		If d2 > s.radius*s.radius Return ret
		Local thc:Float = Sqrt(s.radius*s.radius - d2)
		Local t0:Float = tca-thc
		Local t1:Float = tca+thc
		If t0>.001 Then' offset the original point by .001 To avoid occlusion by the Object itself
			ret.hit = True
			ret.dist = t0
			Return ret
		Endif
		If t1>.001 Then
			ret.hit = True
			ret.dist = t1
			Return ret
		Endif
		
		Return ret
	End
	
	
	Function reflect:vec3(I:vec3, N:vec3)
		Return I.sub(N.scale(2.0 * I.dot(N)))
	End
	
	
	Function refract:vec3(I:vec3, N:vec3, eta_t:Float, eta_i:Float = 1.0)' Snell's law
		Local cosi:Float = -Max(-1.0, Min(1.0, I.dot(N)))
		If cosi<0 Then' If the ray comes from the inside the Object, swap the air And the media
			Return refract(I, N.inv(), eta_i, eta_t)
		Endif
		Local eta:Float = eta_i / eta_t
		Local k:Float = 1 - eta*eta*(1 - cosi*cosi)
		If k<0 Then
			Return New vec3(1,0,0)
		Else
			Return I.scale(eta).add(N.scale(eta*cosi - Sqrt(k)))' k<0 = total reflection, no ray to refract. I refract it anyways, this has no physical meaning
		Endif
	End

	
	Function input:Bool()
		If KeyDown(KEY_ESCAPE) Then
			Return True
		Endif
		If KeyDown(KEY_ENTER) Then
			fs = Not fs
			If fs Then
				SetDeviceWindow(800,600,1)
			Else
				SetDeviceWindow(width,height,4)
			Endif
			sx = DeviceWidth()/Float(width)
			sy = DeviceHeight()/Float(height)
		Endif
		Return False
	End
End


Function Main:Int()
	Print "Go!"
	New RayTracer256()
	Return 0
End
